// this file is adapted from https://github.com/sanger-pathogens/GBS-Typer-sanger-nf/blob/main/nextflow.config

// Dependencies docker image
// NOTE: the built version of the docker image (arm64 or amd64, see https://hub.docker.com/repository/docker/francesccoll/powerbacgwas) will need to be changed depending on host architecture
// process.container = 'francesccoll/powerbacgwas:arm64'
process.container = 'francesccoll/powerbacgwas:amd64'

manifest {
    // homePage = 'https://github.com/francesccoll/powerbacgwas'
    description = "A NextFlow version of PowerBacGWAS"
    // mainScript = 'main.nf'
    nextflowVersion = '>=20.10.0'
}

// The params scope allows you to define parameters that will be accessible in the pipeline script.
// NOTE: tmp_dir is where all temporary files will be saved, working_dir is where the final files will be stored
params {
    // I/O parameters
    vcf = ""
    tree = ""
    outprefix = ""
    pangenome = ""
    regions = ""
    causal_variants = ""
    causal_regions = ""
    phenotype = ""
    parameters = ""
    working_dir = "$PWD"
    tmp_dir = "tmp"
    gwas_tmp_dir = "tmp/gwas_tmp/"
    results_dir = "results"

    // GWAS parameters
    siglev = "0.05"
    pyseer_model = "LMM"
    phenotype_type = "binary"


    // process settings --> memory to be added if necessary
    num_cores = "8"
    memory = ""
    // workflows to be run by default: all set to false
    run_prepare_pangenome = false
    run_prepare_vcf = false
    run_vcf_ast = false
    run_pangenome_ast = false
    run_vcf_regions_ast = false
    run_subsampling_pangenome = false
    run_subsampling_vcf = false
    run_subsampling_burden = false
    run_phensim_pangenome = false
    run_phensim_vcf = false
    run_phensim_burden = false

    help = false
}

env {
    PYTHONPATH = "$baseDir"
}


// NOTE: if using Docker Desktop, make sure Memory in Resources is equal or greater than process.memory

// cleanup = true

profiles {
    standard {
        process.memory = "5GB"
        docker {
             enabled = true
        }
    }

    // Basic configuration for an LSF environment
    lsf {
        process.cpus = 1
        process.memory = "5GB"
        process.queue = "normal"
        process.errorStrategy = { sleep(task.attempt * 200); return 'retry' }
        process.maxRetries = 3
        executor {
            name = "lsf"
            // Maximum number of jobs to spawn at once - adjust as necessary
            queueSize = 100
            jobName = { "powerbacgwas - $task.name - $task.hash" }
            pollInterval = "5 sec"
	   // see https://gitter.im/nextflow-io/nextflow?at=5a7d70d4f283b8e5463cd4ef
    	   perJobMemLimit = true
        }
    }

    // Basic configuration for an LSF environment: same as lsf but with process.queue = "long"
    lsf_long {
        process.cpus = 1
        process.memory = "5GB"
        process.queue = "long"
        process.errorStrategy = { sleep(task.attempt * 200); return 'retry' }
        process.maxRetries = 3
        executor {
            name = "lsf"
            // Maximum number of jobs to spawn at once - adjust as necessary
            queueSize = 100
            jobName = { "powerbacgwas - $task.name - $task.hash" }
            pollInterval = "5 sec"
	   // see https://gitter.im/nextflow-io/nextflow?at=5a7d70d4f283b8e5463cd4ef
    	   perJobMemLimit = true
        }
    }

    // Basic configuration for an LSF environment: same as lsf but with process.queue = "long"
    lsf_basement {
        process.cpus = 1
        process.memory = "5GB"
        process.queue = "basement"
        process.errorStrategy = { sleep(task.attempt * 200); return 'retry' }
        process.maxRetries = 3
        executor {
            name = "lsf"
            // Maximum number of jobs to spawn at once - adjust as necessary
            queueSize = 100
            jobName = { "powerbacgwas - $task.name - $task.hash" }
            pollInterval = "5 sec"
	   // see https://gitter.im/nextflow-io/nextflow?at=5a7d70d4f283b8e5463cd4ef
    	   perJobMemLimit = true
        }
    }


    // Singularity configuration used by the farm
    farm {
        docker {
             enabled = false
        }
        singularity {
             enabled = true
             autoMounts = true
             cacheDir = "$PWD"
        }
    }
}
